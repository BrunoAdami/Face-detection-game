{"version":3,"sources":["components/Pict/face.png","components/Navigat/Navigat.js","components/Pict/Pict.js","components/ImageForm/ImageForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigat","props","react_default","a","createElement","className","style","padding","color","Pict","tilt_default","options","max","height","width","paddingTop","src","face","alt","ImageForm","type","onChange","onInputChange","onClick","onButtonSubmit","FaceRecognition","id","imageUrl","top","box","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateFaceLocation","data","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","console","log","left_col","top_row","right_col","bottom_row","generateBox","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","route","components_Navigat_Navigat","components_Pict_Pict","components_ImageForm_ImageForm","components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b234111.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.ab41af34.png\";","import React from 'react';\n\nconst Navigat = (props) => {\n\treturn(\n\t\t\t<div className='f1 center' style={{padding: 40, color: 'white' }} >Face Detection Game</div> \n\t\t);\n}\n\nexport default Navigat;","import React from 'react';\nimport Tilt from 'react-tilt';\nimport './pict.css';\nimport face from './face.png'\n\nconst Pict = () => {\n\treturn(\n\t\t<div className = 'center ma4 mt0'>\n\t\t\t<Tilt className=\"Tilt\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\n \t\t\t\t<img style={{paddingTop: '5px'}} src={face} alt=\"FaceRecognition\"/>\n\t\t\t</Tilt>\n\t\t</div>\n\t);\n}\n\nexport default Pict;","import React from 'react';\n\nconst ImageForm = (props) => {\n\treturn(\n\t\t<div>\n\t\t\t<p className ='f3 center'>\n\t\t\t\t{'The system will recognize who is the funniest person in your picture!'}\n\t\t\t</p>\n\t\t\t<p className ='f3 center'>\n\t\t\t\t{'Just insert an Url to your image below.'}\n\t\t\t</p>\n\t\t\t<div className='center'>\n\t\t\t\t<div className='form center pa4 br3 shadow-5 '>\n\t\t\t\t\t<input className='f4 pa2 w-70 center' type='text' onChange={props.onInputChange}/>\n\t\t\t\t\t<button \n\t\t\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\n\t\t\t\t\t\tonClick={props.onButtonSubmit}\n\t\t\t\t\t>Analize</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ImageForm;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = (props) => {\n\treturn(\n\t\t<div className='center ma'>\n\t\t<div className='absolute mt2'>\n\t\t\t<img id='inputimage' alt='' src={props.imageUrl}  width='500px' height='auto' />\n\t\t\t<div className='bounding-box'\n\t\t\t\t style = {{top: props.box.topRow, right: props.box.rightCol, \n\t\t\t\t \tbottom: props.box.bottomRow, left: props.box.leftCol}}>\n\t\t\t</div> \n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default FaceRecognition;","\n// Created by Bruno Adami Serine in 01/18/2019\n\n\nimport React, { Component } from 'react';\nimport Signin from './components/Signin/Signin.js';\nimport Navigat from './components/Navigat/Navigat.js';\nimport Pict from './components/Pict/Pict.js';\nimport ImageForm from './components/ImageForm/ImageForm.js';\nimport Position from './components/Position/Position.js';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\nimport Register from './components/Register/Register.js'\nimport './App.css';\nimport Clarifai from 'clarifai';\n\n\nconst app = new Clarifai.App({\n apiKey: '53a3c7a0e5df491db39492e3cd6c68c2'\n});\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n    }\n  }\n\n//the generateFaceBox will calculate the locations of the face box \n\n  generateFaceLocation = (data) => {\n    const face = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width); //transforms the string into a number type\n    const height = Number(image.height);\n    console.log(width, height);\n    return {\n      leftCol: face.left_col * width,\n      topRow: face.top_row * height,\n      rightCol: width - (face.right_col * width),\n      bottomRow: height - (face.bottom_row * height),\n    }\n    //note that the coordenates left_col, top_row etc. are givenn in relative size,\n    //so we need to do some simple math to get the position of it in px\n  }\n\n  generateBox = (box) => {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value}); \n  }\n\n  onButtonSubmit = () => {\n\n    this.setState({imageUrl: this.state.input});\n\n    //here I will use the Machine Learning Face detection API\n\n    app.models\n    .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    .then(response => this.generateBox(this.generateFaceLocation (response)))\n    .catch(err => console.log(err));\n    // from this response I will get the coordenates of the square around the faces\n    }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n            <Navigat />\n            <Pict />\n            <ImageForm onInputChange={this.onInputChange} \n                        onButtonSubmit={this.onButtonSubmit}\n            />\n            <FaceRecognition box={this.state.box} imageUrl = {this.state.imageUrl}/>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}